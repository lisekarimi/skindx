name: Deploy to Hugging Face
on:
  workflow_dispatch:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm deployment'
        required: true
        default: ''
  workflow_call:
    inputs:
      confirm_deployment:
        description: 'Type "deploy" to confirm deployment'
        type: string
        required: true

jobs:
  deploy_to_huggingface:
    if: inputs.confirm_deployment == 'deploy'
    runs-on: ubuntu-latest
    env:
      GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
      GIT_USER_EMAIL: ${{ secrets.GIT_USER_EMAIL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project name and version from pyproject.toml
        id: config
        run: |
          PROJECT_NAME=$(grep '^name = ' pyproject.toml | sed 's/name = "\(.*\)"/\1/')
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Project name: '$PROJECT_NAME'"
          echo "Extracted version: $VERSION"

      - name: Push Docker context to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          HF_USERNAME: ${{ secrets.HF_USERNAME }}
          PROJECT_NAME: ${{ steps.config.outputs.PROJECT_NAME }}
          VERSION: ${{ steps.config.outputs.VERSION }}
        run: |
          DEPLOY_DIR=hf_deploy
          echo "Preparing deployment folder at $DEPLOY_DIR..."
          rm -rf "$DEPLOY_DIR"
          mkdir -p "$DEPLOY_DIR"
          REPO_URL=https://${HF_USERNAME}:${HF_TOKEN}@huggingface.co/spaces/${HF_USERNAME}/${PROJECT_NAME}-demo
          echo "Repository URL: $REPO_URL"
          # Try to clone existing repository first
          if git ls-remote "$REPO_URL" &>/dev/null; then
            echo "Repository exists, cloning..."
            git clone "$REPO_URL" "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"
            find . -mindepth 1 -not -path "./.git*" -exec rm -rf {} +
          else
            echo "â„¹No repo found, initializing a new one..."
            cd "$DEPLOY_DIR"
            git init -b main
            git remote add origin "$REPO_URL"
          fi
          # Set Git user identity
          git config user.name "${GIT_USERNAME}"
          git config user.email "${GIT_USER_EMAIL}"

          # Install and setup Git LFS
          git lfs install
          # Copy deploy files
          cp ../Dockerfile ./
          cp ../README.md ./
          cp ../uv.lock ./
          cp ../pyproject.toml ./
          cp -r ../src ./
          cp ../main.py ./
          # Copy only needed assets
          mkdir -p ./assets/static
          cp ../assets/static/bg.jpg ./assets/static/
          cp ../assets/styles.css ./assets/
          cp -r ../.streamlit ./

          # Track binary files with Git LFS
          git lfs track "*.jpg" "*.png" "*.jpeg" "*.gif" "*.bmp" "*.tiff" "*.webp"
          git lfs track "*.pkl" "*.bin" "*.pt" "*.pth" "*.onnx" "*.h5"
          git add .gitattributes
          # Commit and push changes
          git add .
          git commit -m "Deploy version ${VERSION}" || echo "No changes to commit."
          git push origin main
          echo "ðŸš€ Hugging Face Space updated with version ${VERSION}"

  hf_summary:
    needs: deploy_to_huggingface
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract project info for summary
        id: config
        run: |
          PROJECT_NAME=$(grep '^name = ' pyproject.toml | sed 's/name = "\(.*\)"/\1/')
          VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "Successfully deployed to Hugging Face for version ${{ steps.config.outputs.VERSION }}"
          echo "- Hugging Face Space: huggingface.co/spaces/${{ secrets.HF_USERNAME }}/${{ steps.config.outputs.PROJECT_NAME }}"
