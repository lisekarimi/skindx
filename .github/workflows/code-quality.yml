name: Code quality CI

on:
  push:
    branches: ["feature/**", "dev", "main"]
    paths:
      - "**.py"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/**"
  pull_request:
    branches: [main, dev]
    paths:
      - "**.py"
      - "pyproject.toml"
      - "uv.lock"
      - ".github/workflows/**"
  workflow_dispatch:

jobs:
  lint:
    name: Python Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Run Ruff checks
      run: |
        uvx ruff check .
        uvx ruff format --check .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - id: py
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - uses: astral-sh/setup-uv@v4
        with: { version: latest }

      - name: Cache uv global cache
        uses: actions/cache@v4
        with:
          path: $HOME/.cache/uv
          key: ${{ runner.os }}-uv-py${{ steps.py.outputs.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: ${{ runner.os }}-uv-py${{ steps.py.outputs.python-version }}-

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-venv-py${{ steps.py.outputs.python-version }}-${{ hashFiles('uv.lock', 'pyproject.toml') }}
          restore-keys: ${{ runner.os }}-venv-py${{ steps.py.outputs.python-version }}-

      - name: Install dependencies
        run: uv sync --extra test --frozen

      - name: Run unit tests
        run: |
          mkdir -p reports
          uv run pytest tests --cov=src --cov-report=term-missing | tee reports/coverage.txt

      - name: Upload coverage report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.run_id }}
          path: reports/coverage.txt
